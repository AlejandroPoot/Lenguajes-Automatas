# Generated from ./proyecto_final.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,341,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,
        297,8,32,10,32,12,32,300,9,32,1,32,1,32,1,33,4,33,305,8,33,11,33,
        12,33,306,1,33,1,33,4,33,311,8,33,11,33,12,33,312,3,33,315,8,33,
        1,34,1,34,5,34,319,8,34,10,34,12,34,322,9,34,1,35,4,35,325,8,35,
        11,35,12,35,326,1,35,1,35,1,36,1,36,1,36,1,36,5,36,335,8,36,10,36,
        12,36,338,9,36,1,36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,6,2,0,34,34,92,
        92,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        3,0,9,10,13,13,32,32,2,0,10,10,13,13,348,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,
        75,1,0,0,0,3,77,1,0,0,0,5,79,1,0,0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,
        85,1,0,0,0,13,87,1,0,0,0,15,95,1,0,0,0,17,104,1,0,0,0,19,114,1,0,
        0,0,21,125,1,0,0,0,23,135,1,0,0,0,25,144,1,0,0,0,27,154,1,0,0,0,
        29,156,1,0,0,0,31,158,1,0,0,0,33,160,1,0,0,0,35,162,1,0,0,0,37,167,
        1,0,0,0,39,176,1,0,0,0,41,185,1,0,0,0,43,194,1,0,0,0,45,204,1,0,
        0,0,47,215,1,0,0,0,49,229,1,0,0,0,51,234,1,0,0,0,53,241,1,0,0,0,
        55,250,1,0,0,0,57,255,1,0,0,0,59,264,1,0,0,0,61,270,1,0,0,0,63,277,
        1,0,0,0,65,292,1,0,0,0,67,304,1,0,0,0,69,316,1,0,0,0,71,324,1,0,
        0,0,73,330,1,0,0,0,75,76,5,40,0,0,76,2,1,0,0,0,77,78,5,41,0,0,78,
        4,1,0,0,0,79,80,5,123,0,0,80,6,1,0,0,0,81,82,5,125,0,0,82,8,1,0,
        0,0,83,84,5,59,0,0,84,10,1,0,0,0,85,86,5,44,0,0,86,12,1,0,0,0,87,
        88,5,99,0,0,88,89,5,105,0,0,89,90,5,114,0,0,90,91,5,99,0,0,91,92,
        5,117,0,0,92,93,5,108,0,0,93,94,5,111,0,0,94,14,1,0,0,0,95,96,5,
        99,0,0,96,97,5,117,0,0,97,98,5,97,0,0,98,99,5,100,0,0,99,100,5,114,
        0,0,100,101,5,97,0,0,101,102,5,100,0,0,102,103,5,111,0,0,103,16,
        1,0,0,0,104,105,5,116,0,0,105,106,5,114,0,0,106,107,5,105,0,0,107,
        108,5,97,0,0,108,109,5,110,0,0,109,110,5,103,0,0,110,111,5,117,0,
        0,111,112,5,108,0,0,112,113,5,111,0,0,113,18,1,0,0,0,114,115,5,114,
        0,0,115,116,5,101,0,0,116,117,5,99,0,0,117,118,5,116,0,0,118,119,
        5,97,0,0,119,120,5,110,0,0,120,121,5,103,0,0,121,122,5,117,0,0,122,
        123,5,108,0,0,123,124,5,111,0,0,124,20,1,0,0,0,125,126,5,112,0,0,
        126,127,5,101,0,0,127,128,5,110,0,0,128,129,5,116,0,0,129,130,5,
        97,0,0,130,131,5,103,0,0,131,132,5,111,0,0,132,133,5,110,0,0,133,
        134,5,111,0,0,134,22,1,0,0,0,135,136,5,104,0,0,136,137,5,101,0,0,
        137,138,5,120,0,0,138,139,5,97,0,0,139,140,5,103,0,0,140,141,5,111,
        0,0,141,142,5,110,0,0,142,143,5,111,0,0,143,24,1,0,0,0,144,145,5,
        104,0,0,145,146,5,101,0,0,146,147,5,112,0,0,147,148,5,116,0,0,148,
        149,5,97,0,0,149,150,5,103,0,0,150,151,5,111,0,0,151,152,5,110,0,
        0,152,153,5,111,0,0,153,26,1,0,0,0,154,155,5,43,0,0,155,28,1,0,0,
        0,156,157,5,45,0,0,157,30,1,0,0,0,158,159,5,42,0,0,159,32,1,0,0,
        0,160,161,5,47,0,0,161,34,1,0,0,0,162,163,5,114,0,0,163,164,5,97,
        0,0,164,165,5,105,0,0,165,166,5,122,0,0,166,36,1,0,0,0,167,168,5,
        111,0,0,168,169,5,99,0,0,169,170,5,116,0,0,170,171,5,97,0,0,171,
        172,5,103,0,0,172,173,5,111,0,0,173,174,5,110,0,0,174,175,5,111,
        0,0,175,38,1,0,0,0,176,177,5,110,0,0,177,178,5,111,0,0,178,179,5,
        110,0,0,179,180,5,97,0,0,180,181,5,103,0,0,181,182,5,111,0,0,182,
        183,5,110,0,0,183,184,5,111,0,0,184,40,1,0,0,0,185,186,5,100,0,0,
        186,187,5,101,0,0,187,188,5,99,0,0,188,189,5,97,0,0,189,190,5,103,
        0,0,190,191,5,111,0,0,191,192,5,110,0,0,192,193,5,111,0,0,193,42,
        1,0,0,0,194,195,5,105,0,0,195,196,5,99,0,0,196,197,5,111,0,0,197,
        198,5,115,0,0,198,199,5,97,0,0,199,200,5,101,0,0,200,201,5,100,0,
        0,201,202,5,114,0,0,202,203,5,111,0,0,203,44,1,0,0,0,204,205,5,100,
        0,0,205,206,5,111,0,0,206,207,5,100,0,0,207,208,5,101,0,0,208,209,
        5,99,0,0,209,210,5,97,0,0,210,211,5,101,0,0,211,212,5,100,0,0,212,
        213,5,114,0,0,213,214,5,111,0,0,214,46,1,0,0,0,215,216,5,116,0,0,
        216,217,5,101,0,0,217,218,5,116,0,0,218,219,5,114,0,0,219,220,5,
        97,0,0,220,221,5,100,0,0,221,222,5,101,0,0,222,223,5,99,0,0,223,
        224,5,97,0,0,224,225,5,103,0,0,225,226,5,111,0,0,226,227,5,110,0,
        0,227,228,5,111,0,0,228,48,1,0,0,0,229,230,5,99,0,0,230,231,5,117,
        0,0,231,232,5,98,0,0,232,233,5,111,0,0,233,50,1,0,0,0,234,235,5,
        101,0,0,235,236,5,115,0,0,236,237,5,102,0,0,237,238,5,101,0,0,238,
        239,5,114,0,0,239,240,5,97,0,0,240,52,1,0,0,0,241,242,5,99,0,0,242,
        243,5,105,0,0,243,244,5,108,0,0,244,245,5,105,0,0,245,246,5,110,
        0,0,246,247,5,100,0,0,247,248,5,114,0,0,248,249,5,111,0,0,249,54,
        1,0,0,0,250,251,5,99,0,0,251,252,5,111,0,0,252,253,5,110,0,0,253,
        254,5,111,0,0,254,56,1,0,0,0,255,256,5,116,0,0,256,257,5,114,0,0,
        257,258,5,97,0,0,258,259,5,112,0,0,259,260,5,101,0,0,260,261,5,99,
        0,0,261,262,5,105,0,0,262,263,5,111,0,0,263,58,1,0,0,0,264,265,5,
        114,0,0,265,266,5,111,0,0,266,267,5,109,0,0,267,268,5,98,0,0,268,
        269,5,111,0,0,269,60,1,0,0,0,270,271,5,101,0,0,271,272,5,108,0,0,
        272,273,5,105,0,0,273,274,5,112,0,0,274,275,5,115,0,0,275,276,5,
        101,0,0,276,62,1,0,0,0,277,278,5,112,0,0,278,279,5,97,0,0,279,280,
        5,114,0,0,280,281,5,97,0,0,281,282,5,108,0,0,282,283,5,101,0,0,283,
        284,5,108,0,0,284,285,5,101,0,0,285,286,5,112,0,0,286,287,5,105,
        0,0,287,288,5,112,0,0,288,289,5,101,0,0,289,290,5,100,0,0,290,291,
        5,111,0,0,291,64,1,0,0,0,292,298,5,34,0,0,293,297,8,0,0,0,294,295,
        5,92,0,0,295,297,9,0,0,0,296,293,1,0,0,0,296,294,1,0,0,0,297,300,
        1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,298,
        1,0,0,0,301,302,5,34,0,0,302,66,1,0,0,0,303,305,7,1,0,0,304,303,
        1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,314,
        1,0,0,0,308,310,5,46,0,0,309,311,7,1,0,0,310,309,1,0,0,0,311,312,
        1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,308,
        1,0,0,0,314,315,1,0,0,0,315,68,1,0,0,0,316,320,7,2,0,0,317,319,7,
        3,0,0,318,317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,
        0,0,0,321,70,1,0,0,0,322,320,1,0,0,0,323,325,7,4,0,0,324,323,1,0,
        0,0,325,326,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,328,1,0,
        0,0,328,329,6,35,0,0,329,72,1,0,0,0,330,331,5,47,0,0,331,332,5,47,
        0,0,332,336,1,0,0,0,333,335,8,5,0,0,334,333,1,0,0,0,335,338,1,0,
        0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,336,1,0,
        0,0,339,340,6,36,0,0,340,74,1,0,0,0,9,0,296,298,306,312,314,320,
        326,336,1,6,0,0
    ]

class proyecto_finalLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LPAREN = 1
    RPAREN = 2
    LBRACE = 3
    RBRACE = 4
    SEMI = 5
    COMMA = 6
    DEF_FUNC = 7
    RETURN = 8
    UNTIL = 9
    RECTANGULO = 10
    TRUE = 11
    FALSE = 12
    PRINT = 13
    PLUS = 14
    MINUS = 15
    MUL = 16
    DIV = 17
    RAIZ = 18
    EQUAL = 19
    NO_EQUAL = 20
    MAYOR = 21
    MENOR = 22
    MAYOR_EQUAL = 23
    MENOR_EQUAL = 24
    TEXT = 25
    INTERGER = 26
    DECIMAL = 27
    BOOLEAN = 28
    IF_STRUCTURE = 29
    ELSE_STRUCTURE = 30
    FOR_STRUCTURE = 31
    WHILE_STRUCTURE = 32
    STRING = 33
    NUMBER = 34
    ID = 35
    WS = 36
    COMMENT = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "','", "'circulo'", "'cuadrado'", 
            "'triangulo'", "'rectangulo'", "'pentagono'", "'hexagono'", 
            "'heptagono'", "'+'", "'-'", "'*'", "'/'", "'raiz'", "'octagono'", 
            "'nonagono'", "'decagono'", "'icosaedro'", "'dodecaedro'", "'tetradecagono'", 
            "'cubo'", "'esfera'", "'cilindro'", "'cono'", "'trapecio'", 
            "'rombo'", "'elipse'", "'paralelepipedo'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", "COMMA", "DEF_FUNC", 
            "RETURN", "UNTIL", "RECTANGULO", "TRUE", "FALSE", "PRINT", "PLUS", 
            "MINUS", "MUL", "DIV", "RAIZ", "EQUAL", "NO_EQUAL", "MAYOR", 
            "MENOR", "MAYOR_EQUAL", "MENOR_EQUAL", "TEXT", "INTERGER", "DECIMAL", 
            "BOOLEAN", "IF_STRUCTURE", "ELSE_STRUCTURE", "FOR_STRUCTURE", 
            "WHILE_STRUCTURE", "STRING", "NUMBER", "ID", "WS", "COMMENT" ]

    ruleNames = [ "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", "COMMA", 
                  "DEF_FUNC", "RETURN", "UNTIL", "RECTANGULO", "TRUE", "FALSE", 
                  "PRINT", "PLUS", "MINUS", "MUL", "DIV", "RAIZ", "EQUAL", 
                  "NO_EQUAL", "MAYOR", "MENOR", "MAYOR_EQUAL", "MENOR_EQUAL", 
                  "TEXT", "INTERGER", "DECIMAL", "BOOLEAN", "IF_STRUCTURE", 
                  "ELSE_STRUCTURE", "FOR_STRUCTURE", "WHILE_STRUCTURE", 
                  "STRING", "NUMBER", "ID", "WS", "COMMENT" ]

    grammarFileName = "proyecto_final.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


